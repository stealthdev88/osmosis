task wrapper(type: Wrapper) {
	gradleVersion = '1.4'
}


/* Build collections containing each type of project.  These collections will
 * be used to apply common configurations to projects of the same type.
 */
def packageProjects = allprojects.findAll { project -> project.path.equals(':package') }
def buildProjects = allprojects.findAll { project -> project.path.equals(':build-support') }
// Java projects are all those that aren't in the previous collections.
def javaProjects = subprojects.findAll { project -> !packageProjects.contains(project) && !buildProjects.contains(project) }

// Apply common project configuration
subprojects {
	apply plugin: 'eclipse-wtp'

	// All projects use a common group id.
	group = 'org.openstreetmap.osmosis'

	// Load the project version dynamically from Git
	version = 'git describe --always --dirty'.execute().in.text.trim()

	// Enable access to artefact dependency repositories.
	repositories {
		// Standard Maven repository.
		mavenCentral()

		// Custom local ivy repository for non-public artefacts.
		ivy {
			// URL can refer to a local directory
			url new File(rootDir, 'build-support/repo')

			// Configure Ivy layout to match local repo directory structure.
			layout 'pattern', {
				artifact '[organisation]/[module]/[revision]/[type]s/[artifact].[ext]'
				artifact "[module]/[revision]/[artifact].[ext]"
				ivy "[organisation]/[module]/[revision]/ivys/ivy.xml"
			}
		}
	}
}

// Apply common configurations to all projects supporting Java.
configure(javaProjects) {
	apply plugin: 'checkstyle'
	apply plugin: 'java'
	apply plugin: 'jdepend'
	apply plugin: 'maven'
	apply plugin: 'signing'

	// Add osmosis prefix to all generated jar files.
	archivesBaseName = 'osmosis-' + project.name

	sourceCompatibility = 1.6

	test {
		/*
		 * Pass on each of our custom properties to the unit tests if they have
		 * been provided.
		 */
		['db.apidb.authfile', 'db.pgsql.authfile'].each {
			propName ->
				if (System.getProperties().containsKey(propName)) {
					jvmArgs '-D' + propName + '=' + System.getProperty(propName)
				}
		}
		//testLogging.showStandardStreams = true
	}

	dependencies {
		testCompile group: 'junit', name: 'junit', version: dependencyVersionJunit
	}

	checkstyle {
		configFile = new File(rootDir, 'build-support/checkstyle.xml')
		configProperties.samedir = configFile.parentFile
	}

	// Build javadoc and source jars and include in published artifacts.
	task javadocJar(type: Jar, dependsOn: javadoc) {
		classifier = 'javadoc'
		from 'build/docs/javadoc'
	}
	task sourcesJar(type: Jar) {
		from sourceSets.main.allSource
		classifier = 'sources'
	}
	artifacts {
	    archives jar
	
	    archives javadocJar
	    archives sourcesJar
	}

	// Sign all published artifacts if signing is enabled.
	signing {
		sign configurations.archives
		required = Boolean.valueOf(osmosisSigningEnabled)
	}

	// Configure the maven plugin to upload artefacts to the Sonatype repository.
	uploadArchives {
		repositories {
			mavenDeployer {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

				// Sonatype URLs
				// Snapshots - https://oss.sonatype.org/content/repositories/snapshots/
				// Staging - https://oss.sonatype.org/service/local/staging/deploy/maven2/
				repository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: sonatypeUsername, password: sonatypePassword)
				}

				pom.project {
					name project.name
					packaging 'jar'
					description 'Osmosis is a Java application and library for processing OSM data.'
					url 'http://wiki.openstreetmap.org/wiki/Osmosis'

					scm {
						url 'scm:git@github.com:openstreetmap/osmosis.git'
						connection 'scm:git@github.com:openstreetmap/osmosis.git'
						developerConnection 'scm:git@github.com:openstreetmap/osmosis.git'
					}

					licenses {
						license {
							name 'Public Domain'
						}
					}
				}
			}
		}
	}
}
